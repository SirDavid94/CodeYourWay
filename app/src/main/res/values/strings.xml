<resources>
    <string name="app_name">Code Your Way</string>
    <string name="title_activity_settings">Settings</string>
    <string name="action_settings">Settings</string>
    <!-- Strings related to Settings -->
    <!-- Example General settings -->
    <string name="pref_header_general">General</string>
    <string name="pref_title_social_recommendations">Enable social recommendations</string>
    <string name="pref_description_social_recommendations">Recommendations for people to contact
        based on your message history</string>
    <string name="pref_title_display_name">Display name</string>
    <string name="pref_default_display_name">John Smith</string>
    <string name="pref_title_add_friends_to_messages">Add friends to messages</string>
    <string-array name="pref_example_list_titles">
        <item>Always</item>
        <item>When possible</item>
        <item>Never</item>
    </string-array>
    <string-array name="pref_example_list_values">
        <item>1</item>
        <item>0</item>
        <item>-1</item>
    </string-array>

    <!-- Example settings for Data & Sync -->
    <string name="pref_header_data_sync">Data &amp; sync</string>

    <string name="pref_title_sync_frequency">Sync frequency</string>
    <string-array name="pref_sync_frequency_titles">
        <item>15 minutes</item>
        <item>30 minutes</item>
        <item>1 hour</item>
        <item>3 hours</item>
        <item>6 hours</item>
        <item>Never</item>
    </string-array>
    <string-array name="pref_sync_frequency_values">
        <item>15</item>
        <item>30</item>
        <item>60</item>
        <item>180</item>
        <item>360</item>
        <item>-1</item>
    </string-array>

    <string-array name="list_preference_entries">
        <item>Entry 1</item>
        <item>Entry 2</item>
        <item>Entry 3</item>
    </string-array>

    <string-array name="list_preference_entry_values">
        <item>1</item>
        <item>2</item>
        <item>3</item>
    </string-array>
    <string-array name="multi_select_list_preference_default_value" />

    <string name="pref_title_system_sync_settings">System sync settings</string>

    <!-- Example settings for Notifications -->
    <string name="pref_header_notifications">Notifications</string>

    <string name="pref_title_new_message_notifications">New message notifications</string>

    <string name="pref_title_ringtone">Ringtone</string>
    <string name="pref_ringtone_silent">Silent</string>

    <string name="pref_title_vibrate">Vibrate</string>
    <string name="day_night_mode">Day/Night Mode</string>
    <string name="sounds">Sounds</string>
    <string name="email_address">Email Address</string>
    <string name="username">username</string>
    <string name="password">password</string>
    <string name="confirm_password">confirm password</string>
    <string name="register">Register</string>
    <string name="already_registered">Already_registered ?</string>
    <string name="login">Login</string>
    <string name="user_profile">User Profile</string>
    <string name="register_now">Register Now</string>
    <string name="not_registered">Not Registered ?</string>
    <string name="lastname">lastName</string>
    <string name="firstName">First Name</string>
    <string name="elementary_programming">Elementary Programming</string>
    <string name="selections">Selections</string>
    <string name="facts_of_the_day">Facts of the Day</string>
    <string name="the_java_programming_language_is_developed_by_james_gosling">The Java Programming Language is developed by James Gosling</string>
    <string name="show_next_facts"><![CDATA[Show next facts ->->->]]></string>
    <string name="settings">Settings</string>
    <string name="home">home</string>
    <string name="forgot_password">Forgot Password</string>
    <string name="forgot_username">Forgot Username</string>
    <string name="title_activity_development">Development</string>
    <string name="skip_tutorial">Skip Tutorial</string>
    <string name="next_tutorial">Next Tutorial</string>
    <string name="back">BACK</string>
    <string name="module_message">Congratulations! You have completed this Module!</string>
    <string name="level_complete">Level Completed!!</string>
    <string name="levels_info_from_MCSquestionsPage">Level#</string>
    <string name="questions_headings">questions#</string>
    <string name="question3">question3</string>
    <string name="question4">question4</string>
    <string name="question2">question2</string>
    <string name="actual_questions">actual_questions</string>
    <string name="question1">question1</string>
    <string name="submit">Submit</string>

    <string name="title_activity_walk_through">WalkThroughActivity</string>
    <string name="dummy_button">Dummy Button</string>
    <string name="dummy_content">DUMMY\nCONTENT</string>
    <string name="send_email">Send Email</string>
    <string name="select_a_module_to_continue">Select a Module to Continue</string>
    <string name="math_functions_characters_and_strings">MATH FUNCTIONS, CHARACTERS AND STRINGS</string>
    <string name="loops">loops</string>
    <string name="single_dimensional_array">Single Dimensional Array</string>
    <string name="mod_2_tuto_1"><![CDATA[Relational operators are used to check conditions like whether two values are equal, or whether one is greater than the other.
The following expressions show how they are used:
x == y //x is equal to y
x != y //x is notequal to y
x > y //x is greater than y
x < y //x is lessthan y
x >= y //x is greater than or equalto y
x <= y //x is lessthan or equal to y
        The result of a relational operator is one of two special values, true or false. These values belong to the data type boolean; in fact, they are the only boolean values.]]></string>
    <string name="mod_4_tutorial_1"><![CDATA[Computers are often used to automate repetitive tasks. Repeating tasks without
making errors is something that computers do well and people do poorly.
Running the same code multiple times is called iteration. We have seen methods,
like countdown and factorial, that use recursion to iterate. Although
recursion is elegant and powerful, it takes some getting used to. Java provides
language features that make iteration much easier: the while and for
statements.


The while statement
    Using a while statement, we can rewrite countdown like this:

publicstaticvoidcountdown(intn) {
while(n > 0) {
System.out.println(n);
n = n - 1;
}
System.out.println("Blastoff!");
}
You can almost read the while statement like English: \While n is greater
than zero, print the value of n and then reduce the value of n by 1. When you
get to zero, print Blasto
!"


The for statement
    The loops we have written so far have several elements in common. They
start by initializing a variable, they have a condition that depends on that
variable, and inside the loop they do something to update that variable. This
type of loop is so common that there is another statement, the for loop, that
expresses it more concisely.
For example, we could rewrite printTable like this:

publicstaticvoidprintTable(introws) {
for(inti = 1; i <= rows; i = i + 1) {
printRow(i, rows);
	}
}
Computers are often used to automate repetitive tasks. Repeating tasks without\nmaking errors is something that computers do well and people do poorly.\nRunning the same code multiple times is called iteration. We have seen methods,\nlike countdown and factorial, that use recursion to iterate. Although\nrecursion is elegant and powerful, it takes some getting used to. Java provides\nlanguage features that make iteration much easier: the while and for\nstatements.\nThe while statement\nUsing a while statement, we can rewrite countdown like this:\npublicstaticvoidcountdown(intn) {\nwhile(n > 0) {\nSystem.out.println(n);\nn = n - 1;\n}\nSystem.out.println(\"Blastoff!\");\n}\nYou can almost read the while statement like English: \\While n is greater\nthan zero, print the value of n and then reduce the value of n by 1. When you\nget to zero, print Blasto\n!\"\nThe for statement\nThe loops we have written so far have several elements in common. They\nstart by initializing a variable, they have a condition that depends on that\nvariable, and inside the loop they do something to update that variable. This\ntype of loop is so common that there is another statement, the for loop, that\nexpresses it more concisely.\nFor example, we could rewrite printTable like this:\npublicstaticvoidprintTable(introws) {\nfor(inti = 1; i <= rows; i = i + 1) {\nprintRow(i, rows);\n\t}\n}\n]]></string>
    <string name="mod_5_tuto_1"><![CDATA[
    Creating arrays
An array is a sequence of values; the values in the array are called elements.
You can make an array of ints, doubles, or any other type, but all the values
in an array must have the same type.
To create an array, you have to declare a variable with an array type and then
create the array itself. Array types look like other Java types, except they are
followed by square brackets ([]). For example, the following lines declare that
counts is an \integer array" and values is a \double array":
int[] counts;
double[] values;
To create the array itself, you have to use the new operator,
counts =newint[4];
values =newdouble[size];
The first assignment makes count refer to an array of four integers. The second
makes values refer to an array of double, where the number of elements in
values depends on the value of size.

 ]]></string>

    <string-array name="expertise">
        <item>Beginner</item>
        <item>Intermediate</item>
        <item>Professional</item>
        <item>Hacker</item>
    </string-array>
</resources>
